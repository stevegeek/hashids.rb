#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"

require "benchmark/ips"
require "benchmark/memory"
require "hashids"
require "memory_profiler"

my_salt = "salt!"

def run_check(title, &block)
  puts "\n\n# #{title}:"
  puts "-------------------\n\n"

  Benchmark.ips(time: 3, warmup: 1, &block)
  puts "\n\n## Memory:\n\n"
  Benchmark.memory(&block)
end

run_check(".new") do |x|
  x.report("v1") { ::Hashids.new(my_salt) }
  x.report("v2") { ::Hashids2.new(my_salt) }

  x.compare!
end

run_check("#encode") do |x|
  coder = ::Hashids.new(my_salt)
  coderv2 = ::Hashids2.new(my_salt)

  input = 100.times.map { rand(1000) }.freeze

  x.report("v1") { coder.encode(input) }
  x.report("v2") { coderv2.encode(input) }

  x.compare!
end

run_check("#decode") do |x|
  coder = ::Hashids.new(my_salt)
  coderv2 = ::Hashids2.new(my_salt)

  input = coderv2.encode(rand(1000))

  x.report("v1") { coder.decode(input) }
  x.report("v2") { coderv2.decode(input) }

  x.compare!
end

run_check("#encode_hex") do |x|
  coder = ::Hashids.new(my_salt)
  coderv2 = ::Hashids2.new(my_salt)

  input = rand(1000).to_s(16)

  x.report("v1") { coder.encode_hex(input) }
  x.report("v2") { coderv2.encode_hex(input) }

  x.compare!
end

run_check("#decode_hex") do |x|
  coder = ::Hashids.new(my_salt)
  coderv2 = ::Hashids2.new(my_salt)

  input = coderv2.encode_hex(rand(1000).to_s(16))

  x.report("v1") { coder.decode_hex(input) }
  x.report("v2") { coderv2.decode_hex(input) }

  x.compare!
end

coder = ::Hashids.new(my_salt)
coderv2 = ::Hashids2.new(my_salt)
input = [1]

report = MemoryProfiler.report do
  coder.encode(input)
end

report.pretty_print

puts "-------------"
report = MemoryProfiler.report do
  coderv2.encode(input)
end

report.pretty_print

puts "\n\n\n------large input -------"

input = 100.times.map { rand(1000) }.freeze

report = MemoryProfiler.report do
  coder.encode(input)
end

report.pretty_print

puts "-------------"
report = MemoryProfiler.report do
  coderv2.encode(input)
end

report.pretty_print

puts "-------------"



