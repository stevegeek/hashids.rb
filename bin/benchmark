#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"

require "benchmark/ips"
require "benchmark/memory"
require "hashids"

def run_check(title, &block)
  puts "\n\n# #{title}:"
  puts "-------------------\n\n"

  Benchmark.ips(time: 3, warmup: 1, &block)
  puts "\n\n## Memory:\n\n"
  Benchmark.memory(&block)
end

my_salt = "salt!"

run_check("Longer alphabets are slower") do |x|
  coder = ::Hashids.new(my_salt)
  # coder2 = ::Hashids.new(my_salt, 0, "1234567890abcdef")
  coder21 = ::Hashids2.new(my_salt)
  # coder22 = ::Hashids2.new(my_salt, 0, "1234567890abcdef")

  input = 100.times.map { rand(1000) }.freeze

  x.report("default alphabet") { coder.encode(input) }
  # x.report("custom shorter alphabet") { coder2.encode(input) }
  x.report("v2 default alphabet") { coder21.encode(input) }
  # x.report("v2 custom shorter alphabet") { coder22.encode(input) }

  x.compare!
end

#
# run_check("Longer salts don't change much") do |x|
#   coder = ::Hashids.new(my_salt)
#   coder2 = ::Hashids.new("a" * 100)
#
#   x.report("default salt") { coder.encode([78, 45]) }
#   x.report("longer salt") { coder2.encode([78, 45]) }
#
#   x.compare!
# end
#
# run_check("target length") do |x|
#   coder0 = ::Hashids.new(my_salt, 0)
#   coder = ::Hashids.new(my_salt, 8)
#   coder2 = ::Hashids.new(my_salt, 16)
#   coder3 = ::Hashids.new(my_salt, 32)
#
#   x.report("min length") { coder0.encode([78, 45]) }
#   x.report("length 8") { coder.encode([78, 45]) }
#   x.report("length 16") { coder2.encode([78, 45]) }
#   x.report("length 32") { coder3.encode([78, 45]) }
#
#   x.compare!
# end
